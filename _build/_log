### Starting build.
# Target: ai_test.ml.depends, tags: { package(oUnit), package(qcheck), package(sdl), package(str), package(unix), extension:ml, file:ai_test.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package sdl -modules ai_test.ml > ai_test.ml.depends
# Target: ai.mli.depends, tags: { package(oUnit), package(qcheck), package(sdl), package(str), package(unix), extension:mli, file:ai.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package sdl -modules ai.mli > ai.mli.depends
# Target: command.mli.depends, tags: { package(oUnit), package(qcheck), package(sdl), package(str), package(unix), extension:mli, file:command.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package sdl -modules command.mli > command.mli.depends # cached
# Target: command.cmi, tags: { package(oUnit), package(qcheck), package(sdl), package(str), package(unix), byte, compile, extension:mli, file:command.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package sdl -o command.cmi command.mli # cached
# Target: state.mli.depends, tags: { package(oUnit), package(qcheck), package(sdl), package(str), package(unix), extension:mli, file:state.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package sdl -modules state.mli > state.mli.depends
# Target: state.cmi, tags: { package(oUnit), package(qcheck), package(sdl), package(str), package(unix), byte, compile, extension:mli, file:state.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package sdl -o state.cmi state.mli
# Target: ai.cmi, tags: { package(oUnit), package(qcheck), package(sdl), package(str), package(unix), byte, compile, extension:mli, file:ai.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package sdl -o ai.cmi ai.mli
# Target: ai_test.cmo, tags: { package(oUnit), package(qcheck), package(sdl), package(str), package(unix), byte, compile, extension:cmo, extension:ml, file:ai_test.cmo, file:ai_test.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package sdl -o ai_test.cmo ai_test.ml
# Target: ai.ml.depends, tags: { package(oUnit), package(qcheck), package(sdl), package(str), package(unix), extension:ml, file:ai.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package sdl -modules ai.ml > ai.ml.depends
# Target: ai.cmo, tags: { package(oUnit), package(qcheck), package(sdl), package(str), package(unix), byte, compile, extension:cmo, extension:ml, file:ai.cmo, file:ai.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package sdl -o ai.cmo ai.ml
# Target: command.ml.depends, tags: { package(oUnit), package(qcheck), package(sdl), package(str), package(unix), extension:ml, file:command.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package sdl -modules command.ml > command.ml.depends
# Target: state.ml.depends, tags: { package(oUnit), package(qcheck), package(sdl), package(str), package(unix), extension:ml, file:state.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package unix -package oUnit -package str -package qcheck -package sdl -modules state.ml > state.ml.depends
# Target: command.cmo, tags: { package(oUnit), package(qcheck), package(sdl), package(str), package(unix), byte, compile, extension:cmo, extension:ml, file:command.cmo, file:command.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package sdl -o command.cmo command.ml
# Target: state.cmo, tags: { package(oUnit), package(qcheck), package(sdl), package(str), package(unix), byte, compile, extension:cmo, extension:ml, file:state.cmo, file:state.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package unix -package oUnit -package str -package qcheck -package sdl -o state.cmo state.ml
# Target: ai_test.byte, tags: { package(oUnit), package(qcheck), package(sdl), package(str), package(unix), byte, dont_link_with, extension:byte, file:ai_test.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -package unix -package oUnit -package str -package qcheck -package sdl command.cmo state.cmo ai.cmo ai_test.cmo -o ai_test.byte
# Compilation successful.
